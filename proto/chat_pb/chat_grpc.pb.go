// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: chat.proto

package chat_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_Send2Client_FullMethodName     = "/ChatService/Send2Client"
	ChatService_CloseClient_FullMethodName     = "/ChatService/CloseClient"
	ChatService_CreateCommunity_FullMethodName = "/ChatService/CreateCommunity"
	ChatService_QuitCommunity_FullMethodName   = "/ChatService/QuitCommunity"
	ChatService_JoinCommunity_FullMethodName   = "/ChatService/JoinCommunity"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Send2Client(ctx context.Context, in *SendClientReq, opts ...grpc.CallOption) (*SendClientReply, error)
	CloseClient(ctx context.Context, in *CloseClientReq, opts ...grpc.CallOption) (*CloseClientReply, error)
	CreateCommunity(ctx context.Context, in *CreateCommunityReq, opts ...grpc.CallOption) (*CreateCommunityReply, error)
	QuitCommunity(ctx context.Context, in *QuitCommunityReq, opts ...grpc.CallOption) (*QuitCommunityReply, error)
	JoinCommunity(ctx context.Context, in *JoinCommunityReq, opts ...grpc.CallOption) (*JoinCommunityReply, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Send2Client(ctx context.Context, in *SendClientReq, opts ...grpc.CallOption) (*SendClientReply, error) {
	out := new(SendClientReply)
	err := c.cc.Invoke(ctx, ChatService_Send2Client_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CloseClient(ctx context.Context, in *CloseClientReq, opts ...grpc.CallOption) (*CloseClientReply, error) {
	out := new(CloseClientReply)
	err := c.cc.Invoke(ctx, ChatService_CloseClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateCommunity(ctx context.Context, in *CreateCommunityReq, opts ...grpc.CallOption) (*CreateCommunityReply, error) {
	out := new(CreateCommunityReply)
	err := c.cc.Invoke(ctx, ChatService_CreateCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) QuitCommunity(ctx context.Context, in *QuitCommunityReq, opts ...grpc.CallOption) (*QuitCommunityReply, error) {
	out := new(QuitCommunityReply)
	err := c.cc.Invoke(ctx, ChatService_QuitCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinCommunity(ctx context.Context, in *JoinCommunityReq, opts ...grpc.CallOption) (*JoinCommunityReply, error) {
	out := new(JoinCommunityReply)
	err := c.cc.Invoke(ctx, ChatService_JoinCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Send2Client(context.Context, *SendClientReq) (*SendClientReply, error)
	CloseClient(context.Context, *CloseClientReq) (*CloseClientReply, error)
	CreateCommunity(context.Context, *CreateCommunityReq) (*CreateCommunityReply, error)
	QuitCommunity(context.Context, *QuitCommunityReq) (*QuitCommunityReply, error)
	JoinCommunity(context.Context, *JoinCommunityReq) (*JoinCommunityReply, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Send2Client(context.Context, *SendClientReq) (*SendClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send2Client not implemented")
}
func (UnimplementedChatServiceServer) CloseClient(context.Context, *CloseClientReq) (*CloseClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseClient not implemented")
}
func (UnimplementedChatServiceServer) CreateCommunity(context.Context, *CreateCommunityReq) (*CreateCommunityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedChatServiceServer) QuitCommunity(context.Context, *QuitCommunityReq) (*QuitCommunityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitCommunity not implemented")
}
func (UnimplementedChatServiceServer) JoinCommunity(context.Context, *JoinCommunityReq) (*JoinCommunityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCommunity not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Send2Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Send2Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_Send2Client_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Send2Client(ctx, req.(*SendClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CloseClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CloseClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CloseClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CloseClient(ctx, req.(*CloseClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateCommunity(ctx, req.(*CreateCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_QuitCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).QuitCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_QuitCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).QuitCommunity(ctx, req.(*QuitCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_JoinCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinCommunity(ctx, req.(*JoinCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send2Client",
			Handler:    _ChatService_Send2Client_Handler,
		},
		{
			MethodName: "CloseClient",
			Handler:    _ChatService_CloseClient_Handler,
		},
		{
			MethodName: "CreateCommunity",
			Handler:    _ChatService_CreateCommunity_Handler,
		},
		{
			MethodName: "QuitCommunity",
			Handler:    _ChatService_QuitCommunity_Handler,
		},
		{
			MethodName: "JoinCommunity",
			Handler:    _ChatService_JoinCommunity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
